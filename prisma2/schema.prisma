generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    firstname     String?
    surname       String?
    lastname      String?
    email         String?   @unique
    emailVerified DateTime?
    role          Role      @default(STUDENT)
    accounts      Account[]
    sessions      Session[]
    teacherProfile Teacher?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

enum WeekType {
  EVEN
  ODD
}

enum LessonType {
  LECTURE
  LAB
  KSR
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

model Teacher {
  id        String   @id @default(uuid())
  userId    String   @unique

  user      User     @relation(fields: [userId], references: [id])
  subjects  Subject[]
  lessons   Lesson[]
}

model Group {
  id        String   @id @default(uuid())
  name      String   @unique

  subgroups Subgroup[]
  lessons   Lesson[]   @relation("GroupLessons")
}

model Subgroup {
  id        String   @id @default(uuid())
  name      String
  groupId   String

  group     Group    @relation(fields: [groupId], references: [id])
  lessons   Lesson[]
}

model Subject {
  id         String     @id @default(cuid())
  name       String
  teacherId  String
  teacher    Teacher    @relation(fields: [teacherId], references: [id])
  lessons    Lesson[]
}

model Classroom {
  id     String   @id @default(cuid())
  name   String   @unique
  lessons Lesson[]
}

model Lesson {
  id          String   @id @default(uuid())
  subjectId   String
  teacherId   String
  classroomId String
  startTime   String
  endTime     String
  type        LessonType
  weekType    WeekType
  dayOfWeek   DayOfWeek
  subject     Subject  @relation(fields: [subjectId], references: [id])
  teacher     Teacher  @relation(fields: [teacherId], references: [id])
  classroom   Classroom @relation(fields: [classroomId], references: [id])

  groups      Group[]   @relation("GroupLessons")
  subgroupId  String?
  subgroup    Subgroup? @relation(fields: [subgroupId], references: [id])
}